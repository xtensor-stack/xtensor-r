name: Linux
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master]
concurrency:
  group: ${{ github.workflow }}-${{ github.job }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash -e -l {0}
jobs:
  build:
    runs-on: ubuntu-24.04
    name: ${{ matrix.sys.compiler }} ${{ matrix.sys.version }}
    strategy:
      fail-fast: false
      matrix:
        sys:
        - {compiler: gcc, version: '11'}
        - {compiler: gcc, version: '12'}
        - {compiler: gcc, version: '13'}
        - {compiler: gcc, version: '14'}
        - {compiler: clang, version: '19'}
        - {compiler: clang, version: '20'}

    steps:

    - name: Install GCC
      if: matrix.sys.compiler == 'gcc'
      uses: egor-tensin/setup-gcc@v1
      with:
        version: ${{matrix.sys.version}}
        platform: x64

    - name: Install LLVM and Clang
      if: matrix.sys.compiler == 'clang'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh ${{matrix.sys.version}}
        sudo apt-get install -y clang-tools-${{matrix.sys.version}}
        sudo update-alternatives --install /usr/bin/clang++                 clang++                     /usr/bin/clang++-${{matrix.sys.version}} 200
        sudo update-alternatives --install /usr/bin/clang                       clang                         /usr/bin/clang-${{matrix.sys.version}} 200
        sudo update-alternatives --install /usr/bin/clang-scan-deps   clang-scan-deps     /usr/bin/clang-scan-deps-${{matrix.sys.version}} 200
        sudo update-alternatives --set clang /usr/bin/clang-${{matrix.sys.version}}
        sudo update-alternatives --set clang++ /usr/bin/clang++-${{matrix.sys.version}}
        sudo update-alternatives --set clang-scan-deps /usr/bin/clang-scan-deps-${{matrix.sys.version}}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set conda environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        cache-environment: true

    - name: Configure using CMake
      run: |
        if [[ "${{matrix.sys.compiler}}" = "gcc" ]]; then export CC=gcc-${{matrix.sys.version}}; export CXX=g++-${{matrix.sys.version}}; else export CC=clang; export CXX=clang++; fi
        cmake -Bbuild -DDOWNLOAD_GTEST=ON -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX $(Build.SourcesDirectory)

    - name: Install
      working-directory: build
      run: cmake --install .

    - name: Build
      working-directory: build
      run: cmake --build . --target test_xtensor_r --parallel 8

    - name: Install R package
      working-directory: build
      env:
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "which tar"
        which tar
        export TAR="/usr/bin/tar"
        R -e "library(devtools); install_github('xtensor-stack/Xtensor.R', configure.args = '--novendor')"

    - name: print R HOME
      run: |
        R RHOME
        echo "Printing R_HOME"
        echo $R_HOME

    - name: Run tests (C++)
      working-directory: build/test
      run: ./test_xtensor_r

    - name: Run tests (R)
      working-directory: test
      run: |
        if [[ "${{matrix.sys.compiler}}" = "gcc" ]]; then export CC=gcc-${{matrix.sys.version}}; export CXX=g++-${{matrix.sys.version}}; else export CC=clang; export CXX=clang++; fi
        mkdir ~/.R
        touch ~/.R/Makevars
        echo "CXX14=$CXX" >> ~/.R/Makevars
        echo "CXX14FLAGS=-fPIC -O2" >> ~/.R/Makevars
        Rscript ./unittest.R
      
